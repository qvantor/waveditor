datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PRole {
  USER
  ADMIN
}

enum PProviderType {
  SMTP
  SEND_GRID
}

model User {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  email           String            @unique
  firstName       String?
  lastName        String?
  group           UserOnGroup[]
  template        Template[]
  creatorOf       Group[]
  TemplateVersion TemplateVersion[]
  role            PRole             @default(USER)
  Provider        Provider[]
  Component       Component[]
  Tag             Tag[]
}

model Group {
  id        Int               @id @default(autoincrement())
  createdAt DateTime          @default(now())
  name      String
  user      UserOnGroup[]
  template  GroupOnTemplate[]
  creator   User              @relation(fields: [userId], references: [id])
  userId    Int
}

model Component {
  id            Int              @id @default(autoincrement())
  name          String
  creator       User             @relation(fields: [userId], references: [id])
  userId        Int
  json          Json
  previewHeight Int
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @default(now())
  tags          TagOnComponent[]
}

model Tag {
  id         Int              @id @default(autoincrement())
  name       String
  creator    User             @relation(fields: [userId], references: [id])
  userId     Int
  components TagOnComponent[]
}

model Template {
  id       Int               @id @default(autoincrement())
  name     String
  group    GroupOnTemplate[]
  creator  User              @relation(fields: [userId], references: [id])
  userId   Int
  versions TemplateVersion[]
}

model TemplateVersion {
  id         Int       @id @default(autoincrement())
  name       String?
  json       Json
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  template   Template? @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId Int
  creator    User      @relation(fields: [userId], references: [id])
  userId     Int
}

model Provider {
  id        Int           @id @default(autoincrement())
  type      PProviderType
  name      String
  config    Json
  active    Boolean?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())
  creator   User          @relation(fields: [userId], references: [id])
  userId    Int
}

// M-N Relations

model TagOnComponent {
  tag         Tag       @relation(fields: [tagId], references: [id])
  tagId       Int
  component   Component @relation(fields: [componentId], references: [id])
  componentId Int
  assignedAt  DateTime  @default(now())

  @@id([tagId, componentId])
}

model UserOnGroup {
  group      Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId    Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  assignedAt DateTime @default(now())

  @@id([groupId, userId])
}

model GroupOnTemplate {
  Group      Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId    Int
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId Int

  @@id([groupId, templateId])
}
