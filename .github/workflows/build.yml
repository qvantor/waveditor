name: Test and Publish Containers

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      - name: Build
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - run: npm run lint
      - run: npm run test
      - run: npm run build

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: distFolder
          path: dist/apps/backend

  push_container:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: distFolder
          path: dist/apps/backend

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1

      - name: Backend Build and push
        uses: docker/build-push-action@v2
        with:
          file: ./apps/backend/Dockerfile
          push: true
          tags: waveditor/backend:${{ steps.package-version.outputs.current-version }}
          context: .

      - name: Frontend Build and push
        uses: docker/build-push-action@v2
        with:
          file: ./apps/wavemail/Dockerfile
          push: true
          tags: waveditor/frontend:${{ steps.package-version.outputs.current-version }}
          context: .

  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [push_container]
    steps:
      - name: Deploy on Remote server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_SECRET }}
          script: |
            cd ~/project/waveditor
            git pull
            docker compose pull
            docker compose up -d
